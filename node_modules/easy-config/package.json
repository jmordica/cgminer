{
  "author": {
    "name": "Karl D端端na",
    "email": "karl.dyyna@gmail.com"
  },
  "name": "easy-config",
  "description": "Configuration loader for node using object extending and input from files and command line",
  "keywords": [
    "configuration",
    "config",
    "command line",
    "loader"
  ],
  "version": "0.2.3",
  "repository": {
    "type": "git",
    "url": "git@github.com:DeadAlready/node-easy-config"
  },
  "main": "lib/config.js",
  "dependencies": {},
  "devDependencies": {
    "vows": "0.6.x"
  },
  "optionalDependencies": {},
  "engines": {
    "node": ">=0.8.0"
  },
  "readme": "[easy-config](https://github.com/DeadAlready/node-easy-config) is a simple configuration loader for node projects.\r\n\r\n# Installation\r\n\r\n    $ npm install easy-config\r\n\r\n# Usage\r\n\r\neasy-config loads configuration from JSON files and the command line returning an object containing the sum of configurations.\r\n\r\n## Default usage\r\n\r\nSimply require the module and thats it\r\n\r\n    var config = require('easy-config');\r\n\r\nIt will try to read JSON files from config subfolder.\r\nStarting with an empty object extend the configuration object by adding or overwriting the values obtained in the following order\r\n\r\n1. config.json\r\n2. config.dev.json (this is because default environment is development)\r\n3. command line input\r\n4. all other files are added under ns key in the following format\r\n  -> config.keys.json will be under ns.keys\r\n\r\n### Command line\r\n\r\nInput is expected in the --{name}={value} format.\r\n\r\nYou can also set nested properties by using dots to specify the nesting like so:\r\n\r\n    $ node test.js --log.level.is==true  \r\n\r\n## Options\r\n\r\nThe following options are available:\r\n\r\n+ folder: *The configuration folder will default to process.cwd() + '/config'\r\n+ cmd: *Whether to load configurations from the command line will default to true\r\n+ envs: *Array of environment names. These files will not be loaded by default. Will default to ['dev','pro']\r\n+ env: *Environment for which to load configuration will default to 'dev' (this will try to load config.dev.json)\r\n+ type: *String -> file extension to load, defaults to JSON. Files are included with require, so js and json files are supported by default.\r\n+ pre: *Object to start extending, defaults to {}\r\n+ ns: *Boolean whether to append files under ns property\r\n\r\nThere are two ways of specifying the options:\r\n\r\n### loadConfig\r\n\r\nYou can modify the loading options by using the method loadConfig(options) that is on the configuration object.\r\n\r\n    var config = require('easy-config').loadConfig(options);\r\n\r\n### Command line\r\n\r\nYou can also specify the loading options from the command line in the following format -{name}={value}.\r\n\r\nTake note that the format differs between loading configuration options and configuration extending by one '-' sign.\r\n\r\nOptions specified on command line will take precedent over options specified in code.\r\n\r\n    $ node test.js -env=pro\r\n\r\n## Examples\r\n\r\nconfig.json:\r\n\r\n    {\r\n      \"log\":{\r\n        \"name\":\"It's useful to log\",\r\n        \"level\":\"info\"\r\n      }\r\n    }\r\nconfig.dev.json:\r\n\r\n    {\r\n      \"log\":{\r\n        \"level\":\"debug\"\r\n      },\r\n      \"correct\":true\r\n    }\r\n\r\nindex.js\r\n\r\n    var config = require('easy-config');\r\n    console.log(config);\r\n\r\nWill create the following output:\r\n\r\n    {\r\n      log:{\r\n        name:\"It's useful to log\",\r\n        level:\"debug\"\r\n      },\r\n      correct:true\r\n    }\r\n\r\n### Namespaces\r\n\r\nNamespaces option allows to load multiple configuration files into their own namespace\r\n\r\nHaving config.runner.json\r\n    {\r\n      \"name\":\"runner\"\r\n    }\r\n\r\nWill create the following\r\n\r\n    {\r\n      ...\r\n      ns:{\r\n        runner:{\r\n          name:\"runner\"\r\n        }\r\n      }\r\n    }\r\n\r\n### Extend\r\n\r\nThe config object also comes with the convenience method of extend to allow overwriting \r\nor extending the configuration object.\r\n\r\nUsage:\r\n\r\n    var config = require('easy-config').extend({newProp:true});\r\n\r\nWill result in:\r\n\r\n    {\r\n      ...\r\n      newProp:true\r\n    }\r\n\r\nYou can also extend arbitrary objects by calling extend with 2 objects. \r\nThe second object will overwrite the first object.\r\n\r\nUsage:\r\n\r\n    var config = require('easy-config');\r\n    config = config.extend({newProp:true,oldProp:'Old'},{newProp:false, newestProp:'Newest'});\r\n\r\nWill result in:\r\n\r\n    {\r\n      newProp:false,\r\n      oldProp:'Old',\r\n      newestProp:'Newest'\r\n    }\r\n\r\n### Modify/unmodify\r\n\r\nYou can modify the config object so that the modification persist over \r\nthe next requrie calls.\r\n\r\nUsage:\r\n\r\n    var config = require('easy-config');\r\n    config.modify({newProp:true});\r\n    console.log(require('easy-config'));\r\n\r\nWill result in:\r\n\r\n    {\r\n      ...\r\n      newProp:true\r\n    }\r\n\r\nYou can undo the modifications by calling unmodify\r\n\r\nUsage:\r\n\r\n    var config = require('easy-config');\r\n    config.modify({newProp:true});\r\n    config.unmodify();\r\n    console.log(require('easy-config'));\r\n\r\nWill result in:\r\n\r\n    {\r\n      ...\r\n    }\r\n\r\n## File manipulation\r\n\r\neasy-config also provides some file manipulation functions for easy configuration file modifying\r\nif a need should arise for a persistent cross process on the fly dynamic configuration\r\n\r\n### writeConfigFile(name, object)\r\n\r\nwriteConfigFile is a function for writing a new configuration file or overwriting an existing file.\r\nThe function takes two parameters:\r\n+ name -> the name of the new file 'config.new.json' and 'new' are equivalent\r\n+ object -> this object will be JSON.stringified before writing to file\r\n\r\nThe function will return the new configuration object or false if writing fails\r\n\r\n### changeConfigFile(name, object)\r\n\r\nchangeConfigFile is a function for extending the json object in a file with new data.\r\nThe function takes two parameters:\r\n+ name -> the name of the new file 'config.new.json' and 'new' are equivalent\r\n+ object -> the previous contents will be extended with this object and the result written to file\r\n\r\nThe function will return the new configuration object or false if writing fails\r\n\r\n### deleteConfigFile(name)\r\n\r\ndeleteConfigFile is a function for deleting a configuration file\r\n+ name -> the name of the new file 'config.new.json' and 'new' are equivalent\r\n\r\nFunction returns new configuration object or false if no such file is mapped.\r\n\r\n### getDefinedOptions()\r\n\r\ngetDefinedOptions is a function for getting the easy-configs inner options object\r\n\r\nFunction returns the current options object of the config.\r\n\r\n### isProduction()\r\n\r\nisProduction is a function for getting a boolean indication if production config is used\r\n\r\nFunction returns boolean true or false\r\n\r\n## License\r\n\r\nThe MIT License (MIT)\r\nCopyright (c) 2012 Karl D端端na\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/DeadAlready/node-easy-config/issues"
  },
  "homepage": "https://github.com/DeadAlready/node-easy-config",
  "_id": "easy-config@0.2.3",
  "_from": "easy-config@0.2.3"
}
