{
  "name": "reboot",
  "description": "Quickly reboot Linux from node.js without fork()ing /sbin/shutdown or going thru initscripts",
  "homepage": "http://egorfine.github.com/node-reboot",
  "bugs": {
    "url": "http://github.com/egorFiNE/node-reboot/issues"
  },
  "version": "0.0.1",
  "author": {
    "name": "Egor Egorov"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/egorfine/node-reboot.git"
  },
  "main": "./index",
  "scripts": {
    "install": "node-gyp rebuild"
  },
  "gypfile": true,
  "readme": "# node-reboot\n\nReboot Linux kernel immediately from node without calling `/sbin/shutdown` or going thru initscripts. \n\n## Why? \n\nI'm running a cluster of Linux servers which boot readonly and perform a memory-intensive computations. node-reboot is a part of a watchdog application, which in case of emergencies much reboot the server immediately without `fork()`ing another process or going thru upstart/initscripts.\n\n## Synopsis\n\nCall `sync()` and then reboot: \n\n```javascript\nrequire('reboot').reboot();\n```\n\nReboot without `sync()`ing: \n\n```javascript\nrequire('reboot').rebootImmediately();\n```\n\nThe function should never return. If it does, it means node has insufficient permissions. \n\n## Permissions\n\nIf you are to run node process under non-superuser, be sure to give node permissions to reboot the system: \n\n```\nsudo setcap CAP_SYS_BOOT=+ep /usr/local/bin/node\n```\n\nSee `man capabilities` for details.\n\n\n## Installation\n\n```\nnpm install reboot\n```\n\nor\n\n```\nnpm install .\n```\n\n\n## License\n\nSee LICENSE file. Basically, it's a kind of \"do-whatever-you-want-for-free\" license.\n\n\n",
  "readmeFilename": "README.md",
  "_id": "reboot@0.0.1",
  "dist": {
    "shasum": "c53a39ef0b18b104db292fe933465ca3e54a2030"
  },
  "_from": "reboot@0.0.1",
  "_resolved": "https://registry.npmjs.org/reboot/-/reboot-0.0.1.tgz"
}
